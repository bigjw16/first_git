GUI Programming에서의 Event
	:Event 가 발생하면 특정 동작이 수행되도록 Event를 고유의 특정 Class로 추상화하고 
 	 EventHandler를 제공한다.
___________________________________________________________________________________________________
<KeyPressEvent>
import sys
from PyQt6.QtWidgets import (QApplication, 
                                         QMainWindow, QLabel)
from PyQt6.QtCore import Qt

class MW(QMainWindow):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        self.setGeometry(100, 100, 300, 200)
        self.setWindowTitle("Event Handling Ex")
        label = QLabel(
            """<p>Press the <b>ESC</b> key
            to quit this program.</p>""")
        self.setCentralWidget(label)
        self.show()

    def keyPressEvent(self, event):
        if event.key() == Qt.Key.Key_Escape:
            print("ESC key pressed!")
            self.close()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MW()
    sys.exit(app.exec())
___________________________________________________________________________________________________
<Signals and Slots>
import sys

from PyQt6.QtWidgets import (QApplication, QWidget,
                             QLabel,
                             QVBoxLayout,
                             QCheckBox,QButtonGroup)
from PyQt6.QtCore import Qt

class MW (QWidget):

    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("Ex: QCheckbox")
        self.setup_main_wnd()
        self.show()

    def setup_main_wnd(self):
        lm = QVBoxLayout()

        lm.addWidget(QLabel('What is most important?'))

        self.bg = QButtonGroup(self)

        self.cb01 = QCheckBox('1. faith')
        lm.addWidget(self.cb01)
        self.bg.addButton(self.cb01)
        self.cb02 = QCheckBox('2. hope')
        lm.addWidget(self.cb02)
        self.bg.addButton(self.cb02)
        self.cb03 = QCheckBox('3. love')
        lm.addWidget(self.cb03)
        self.bg.addButton(self.cb03)

        self.bg.setExclusive(True)
        self.bg.buttonClicked.connect(self.ck_click)

        self.dp_label = QLabel("")
        lm.addWidget(self.dp_label)

        self.cb = QCheckBox('Check it for the multiple selection.')
        self.cb.stateChanged.connect(self.ck_multiple)
        lm.addWidget(self.cb)

        self.setLayout(lm)

    def ck_click(self, button):
        tmp = ""
        tmp = button.text()

        print(tmp)
        self.dp_label.setText(tmp)

    def ck_multiple(self, state):
        if state == Qt.CheckState.Checked:
            self.bg.setExclusive(True)
        else:
            self.bg.setExclusive(False)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_wnd = MW()
    sys.exit(app.exec())
___________________________________________________________________________________________________
<Custom Signal>

import sys,os

from PyQt6.QtWidgets import (QApplication, QMainWindow,
                                                                         QWidget, QLabel, QVBoxLayout)

from PyQt6.QtGui import QPixmap, QKeyEvent
from PyQt6.QtCore import Qt, pyqtSignal, QObject, QSize

class MW(QMainWindow):
    change_pixmap = pyqtSignal(int)

    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        self.fstr = os.path.dirname(os.path.abspath(__file__))

        self.setGeometry(100,100, 200, 300)
        self.setWindowTitle("Custom Signals Ex")
        self.setup_main_wnd()
        self.show()

    def setup_main_wnd(self):
        self.idx = 0

        # self.signal = DsSignal()
        # self.signal.change_pixmap.connect(self.change_pixmap_handler)

        self.change_pixmap.connect(self.change_pixmap_handler)

        lm = QVBoxLayout()

        info_label = QLabel("<p>Press <i>+</i> key or <i>-</i> key to change image</p>")
        info_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        lm.addWidget(info_label)

        self.img_label = QLabel()
        pixmap = QPixmap(f"{self.fstr}/img/0.png")
        self.img_label.setPixmap(pixmap.scaled(
            QSize(180,250),
            Qt.AspectRatioMode.KeepAspectRatio,
            Qt.TransformationMode.SmoothTransformation
        ))
        self.img_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        lm.addWidget(self.img_label)

        container = QWidget()
        container.setLayout(lm)

        self.setCentralWidget(container)


    def keyPressEvent(self, event: QKeyEvent):

        print(event.key())

        if event.key() == Qt.Key.Key_Plus:
            # self.signal.change_pixmap.emit(1)
            self.change_pixmap.emit(1)
        elif event.key() == Qt.Key.Key_Minus:
            # self.signal.change_pixmap.emit(-1)
            self.change_pixmap.emit(-1)

        return super().keyPressEvent(event) 

    def change_pixmap_handler(self, offset):
        self.idx = (self.idx + offset) % 10
        if self.idx <0 :
            self.idx = 9
        print(self.idx)
        pixmap = QPixmap(f"{self.fstr}/img/{self.idx}.png")
        self.img_label.setPixmap(pixmap.scaled(
            QSize(180,250),
            Qt.AspectRatioMode.KeepAspectRatio,
            Qt.TransformationMode.SmoothTransformation
        ))

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MW()
    sys.exit(app.exec())

