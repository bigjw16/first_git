QHBoxLayout
QVBoxLayout
QGridLayout
QtDesigner
----------------------------------------------------------------------------------------------------------
<QHBoxLayout>
import sys
import traceback

PYSIDE = True
try:
    from PySide6.QtWidgets import (QApplication, QWidget, 
                            QMainWindow,
                            QLabel,
                            QHBoxLayout,
                            )
    from PySide6.QtCore import Qt
except:
    e_msg = traceback.format_exc()
    print(e_msg)
    PYSIDE = False    

PYQT = True
if not PYSIDE:
    try:
        from PyQt6.QtWidgets import (QApplication, QWidget, QMainWindow,
                                    QLabel,
                                    QHBoxLayout,
                                    )
        from PyQt6.QtCore import Qt
    except:
        e_msg = traceback.format_exc()
        print(e_msg)
        PYQT = False

class DsLabel(QLabel):

    def __init__(self,text,color):
        super().__init__(text)
        self.setStyleSheet(f"background-color: {color}")
        self.setAlignment(Qt.AlignmentFlag.AlignCenter)

class MW (QMainWindow):

    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("Ex: QHBoxLayout")
        self.setup_main_wnd()
        self.show()

    def setup_main_wnd(self):

        lm = QHBoxLayout()

        colors = ['red','green', 'blue', 'magenta', 'yellow']

        for i,c in enumerate(colors):
            lm.addWidget(DsLabel(str(i),c))

        dummy = QWidget()
        dummy.setLayout(lm)

        self.setCentralWidget(dummy)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_wnd = MW()
    sys.exit(app.exec())
___________________________________________________________________________________________________
<QVBoxLayout>
import sys

from PyQt6.QtWidgets import (QApplication, QWidget,
                             QLabel,
                             QVBoxLayout, QSizePolicy,
                             QLineEdit, QPushButton)
from PyQt6.QtCore import Qt

class MW (QWidget):

    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("Ex: QVBoxLayout and QSizePolicy")
        self.setup_main_wnd()
        self.show()

    def setup_main_wnd(self):
        lm = QVBoxLayout()

        self.label0 = QLabel('Enter text!')
        lm.addWidget(self.label0)

        lm.addSpacing(10) # fixed spacing

        self.label1 = QLabel('--------')
        lm.addWidget(self.label1)

        lm.addSpacing(20) # fixed spacing

        self.line_edit = QLineEdit()
        lm.addWidget(self.line_edit)

        lm.addStretch(1)

        self.label2 = QLabel('--------')
        lm.addWidget(self.label2)

        lm.addStretch(2)

        self.push_button = QPushButton("Check")
        lm.addWidget(self.push_button)
        self.print_qsize()
        self.setLayout(lm)

    def print_qsize(self):

        print('==============================')
        print("label0's ideal size (=sizeHint)     :",self.label0.sizeHint())
        print("label1's ideal size (=sizeHint)     :",self.label1.sizeHint())
        print("label2's ideal size (=sizeHint)     :",self.label2.sizeHint())
        print("line_edit's ideal size (=sizeHint)  :",self.line_edit.sizeHint())
        print("push_button's ideal size (=sizeHint):",self.push_button.sizeHint())
        print('==============================')
        print("label0's size      :",self.label0.size()     ,"/",self.label0     .sizePolicy().verticalPolicy(),"/",self.label0     .sizePolicy().horizontalPolicy())
        print("label1's size      :",self.label1.size()     ,"/",self.label1     .sizePolicy().verticalPolicy(),"/",self.label1     .sizePolicy().horizontalPolicy())
        print("label2's size      :",self.label2.size()     ,"/",self.label2     .sizePolicy().verticalPolicy(),"/",self.label2     .sizePolicy().horizontalPolicy())
        print("line_edit's size   :",self.line_edit.size()  ,"/",self.line_edit  .sizePolicy().verticalPolicy(),"/",self.line_edit  .sizePolicy().horizontalPolicy())
        print("push_button's size :",self.push_button.size(),"/",self.push_button.sizePolicy().verticalPolicy(),"/",self.push_button.sizePolicy().horizontalPolicy())

    # resize event handler    
    def resizeEvent(self,event):
        super().resizeEvent(event)
        self.print_qsize()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_wnd = MW()
    sys.exit(app.exec())
___________________________________________________________________________________________________
<QGridLayout>
# Import necessary modules

import  sys, json
from  PyQt6.QtWidgets  import (QApplication,QWidget,
                       QLabel, QGridLayout)

from  PyQt6.QtCore  import  Qt
from  PyQt6.QtGui  import  QFont

class  MW(QWidget):
    def  __init__(self):
        super().__init__()
        self.init_ui()

    def  init_ui(self):
        """Set up the application's GUI."""
        self.setMinimumSize(500, 500)
        self.setWindowTitle("QGridLayout Example")
        self.setup_mw()
        self.show()

    def  setup_mw(self):
        colors = ['white','gray','blue','red','yellow']
        labels = []
        for  i  in  range(5):
            label = QLabel(f"label {i}")
            label.setFont(QFont("Arial", 20))
            label.setStyleSheet(f"background-color:{colors[i]}")
            label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            labels.append(label)

        self.main_grid = QGridLayout()

        self.main_grid.addWidget(labels[0], 0, 0)       
        self.main_grid.addWidget(labels[1], 1, 0, 3, 3)

        self.main_grid.addWidget(labels[2], 4, 0, 1, 1)
        self.main_grid.addWidget(labels[3], 4, 1)
        self.main_grid.addWidget(labels[4], 5, 2)

        self.setLayout(self.main_grid)

if  __name__ == '__main__':
    app = QApplication(sys.argv)
    wd = MW()
    sys.exit(app.exec())

___________________________________________________________________________________________________
<QtDesigner>
QtDesigner: Qt 프레임워크를 활용하여 GUI를 쉽게 설계할 수 있게 drag and drop 방식의 UI 
	    Design Tool
#https://wikidocs.net/188050 ← QtDesinger 기본 구성 및 예제
___________________________________________________________________________________________________
<QUiLoader>
QtUiLoader: Qt 프레임워크에서 QtDesigner로 생성된 .ui 파일을 runtime에서 로딩하여 widget
	    으로 생성하는 역할을 수행함
개발 과정 간소화 및 인터페이스 변경시 코드 수정 X → 전체적인 유지 보수의 편리성 제공
