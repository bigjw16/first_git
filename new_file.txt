pyside(pyqt)기본 개념
object = instance 
class = 일종의 type
instance(붕어빵) = class(붕어빵틀) --> class가 실체화 됨을 나타냄, type의 변수

oop = 상호작용을 통해 구현, 모듈화가 자연스럽고 재사용성이 높음
공통적인 것을 상위에 특성 있는 것을 하위 폴더에 배치 
________________________________________________________________________________________
<oop 실행파일>
import matplotlib.pyplot as plt
import matplotlib
import oop.Circle
import oop.Point
import oop.Rectangle

def test_external_axes():
    fig,axes = plt.subplots(figsize=(5,5))
    a = oop.Point.Point(2,2,axes)
    axes = a.draw()
    b = oop.Circle.Circle(4,4,2,axes)
    b.draw()
    plt.show()

def test_internal_axes():
    c = oop.Rectangle.Rectangle(0,0,6,6)
    c.draw()
    c.show()

if __name__ == "__main__":
    print(matplotlib.__version__)
    test_internal_axes()
    
________________________________________________________________________________________________
<oop 구현파일>
import matplotlib.pyplot as plt
import matplotlib.patches
from .Point import Point

class Rectangle(Point):
    
    def __init__(self, x, y, w, h, _axes=None):
        super().__init__(x,y,_axes)
        self.w = w
        self.h = h
    
    def draw(self):
        super().draw()
        r = matplotlib.patches.Rectangle(
            xy = (self.x,self.y),
            width = self.w,
            height = self.h, 
            ec = 'black',
            fc = 'blue',
            fill = False,
            angle = 45
        )
        self.axes.add_patch(r)
        return self.axes
    
if __name__ == "__main__":
    a = Rectangle(3,3,1,1)
    a.draw()
    a.show()
_________________________________________________________________________________________________
위와 같은 형식으로 실제 특성을 저장한 코드 파일과 실행할 코드 파일을 따로 설정하여 비슷한
기능을 구현하는 파일 제작시 하위 구현 코드만을 변경하여 실행 시킬 수 있도록 나눔 

pyside(pyqt)의 주요 modules 3가지
1. QtGui: 기본적인 그래픽 기능 (이미지, 폰트, 픽셀 등)
2. Qtwidgets: widget 기능 
3. QtCore: 기본 기능 (메모리, 네트워크, 시스템 등)

Main window의 구성
1. Menu bar
2. Tool bar
3. Dock widgets
4. Central widget
5. Status bar

__________________________________________________________________________________________________
<초기화 설정>
import sys
from PySide6.QtWidgets import (QMainwindow, QWidgets, ...)
def __init__(self):
  super().__init__()
  self.init_ui()

def init_ui(self): 
  self.setMinimumSize(400, 500)
  self.setWindowTitle("Title of Main Window")
  ...
  self.show()
if __name__ == "__main__"":
    app = QApplication(sys.argv)
    wnd = MW()
    sys.exit(app.exec())
__________________________________________________________________________________________________
위의 코드는 central widget 설정을 하지 않은 기본적인 window를 만드는 방법이다.


Qlabel: Gui에서 고정된 text를 보여주거나 고정된 image를 보여줌
QFont: Gui에서 사용할 Font를 설정
QPixmap: Gui에서 image를 나타냄 -->(file 경로 찾기)
QPushButton: Gui에서 click하면 정해진 처리가 수행되는 방식으로 event 처리
QLIneEdit: 한줄의 문자열 입력에 사용되는 widget
QRadioButton: 여러 option(선택지) 중에 하나를 선택하는 경우 사용되는 widget
QCheckBox: 여러 option(선택지) 중에 여러개를 선택하는 경우 사용되는 widget
QGroupBox: 
QComboBox: 사전에 정의된 항목 중에서 입력받는 widget
QSlider: 범위내에서 value를 선택하거나 조절할 수 있는 slider을 제공하는 widget
QSpinBox: 
QDoubleSpinBox
QProgressBar
QTextEdit: 여러 줄의 text를 입력받을 수 있는 widget
QHBoxLayout: widget을 수평으로 배치
QVBoxLayout: widget을 수직으로 배치
QGridLayout: widget을 격자모양으로 배치
QMessageBox: 사용자에게 공지를 하기 위한 dialog (information, about, question, critical, warning),
QInputDialog: 사용자로부터 문자열, 숫자 등을 입력받기 위한 dialog
QDialog: dialog box를 추상화하여 dialog에 필요한 표준 기능들을 미리 구현하고 있는 class
QFileDialog: 사용자가 file이나 directory를 선택하면 path를 표시하는 인터페이스 제공
QMenuBar: Gui Application에서 실행가능한 command들을 사용자가 쉽게 접근 및 제어 할 수 있도록 해주는 Tool
QStatusBar: user interface에서 상태 정보를 표시하는 영역으로 window 하단에 위치


modeless dialog: 대화상자가 종료되지 않더라도 Mainwindow를 제어할 수 있음 
modal dialog: 대화상자가 종료되기 전까지 Mainwindow를 제어할 수 없음

__________________________________________________________________________________________________
QtDesigner를 활용한 GUI 설정

기본 방법: Qt designer을 통한 Ui 구성 이후 해당 widget들을 동작하도록 연결


__________________________________________________________________________________________________
GIT 사용법

GIT: 분산형 버전 관리 시스템(DVCS)로 자유롭게 로컬, 서버를 오가며 작업 가능
__________________________________________________________________________________________________
Untracked	Unmodified	Modified		staged
      -----------------------------add file--------------------------->
		       -------edit file----->
				     -------stage file---->
      <-----remove file----
		       <-----------------commit----------------
__________________________________________________________________________________________________

GIT 기본 명령어
init: local dictory를 git repository로 만드는 명령어
status: working directory의 파일 상태를 확인하는 명령어
add: untracked file을 stage에 이동시키는 명령어(Tracked file로 변경됨)
commit: stage에서 repository로 이동시켜 version관리를 시작하게 하는 명령어
	--amend: repository에 올라간 commit 수정하는 명령어
log: commit history를 보여주는 명령어
	--branches: 모든 branch의 commit history를 출력
	--oneline: commit들을 한 line으로 출력
	-n <int>: commit history에서 출력할 commit의 수를 지정
	--stat: commit에서 변경된 파일과 추가 및 삭제된 line수(statistics)를 출력
	--graph: branches의 merge 등의 관계를 ascii graph로 출력
diff: 파일을 비교하여 차이를 보여주는 명령어, 변경된 내용 확인시켜주는 명령어
	--staged: 
	--HEAD: 
rm: stage에 있는 tracked file을 삭제하는 명령어
mv: 파일 이름을 변경해주는 명령어
restore: stated가 된 파일을 다시 working tree로 되돌리거나 working tree의 수정사항을 최근 
           commit으로 다시 돌리는 명령어, commit 이전에서 되돌리기에 주로 사용된다.
revert: repository에 반영된 내용을 취소하는 명령어 자동으로 commit이 이루어진다.
reset: repository, stage, working tree의 상태를 원하는 시점으로 복원하는 데 사용하는 명령어
branch: 프로젝트를 독립적으로 관리할 수 있도록 분리시켜줌
switch: branch의 전환 및 new branch 생성 및 전환
merge: 두개 이상의 브랜치를 병합하는데 사용하는 명령어
rebase: merge명령어로 수행되지 않지만 branch를 병합하는데 사용됨 base commit을 변경하여
          일직선 구조의 branch를 만들 수 있음
tag:
clone:
push:
pull:
stash:





















